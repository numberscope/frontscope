{
    "name": "frontscope",
    "version": "0.3.0",
    "type": "module",
    "scripts": {
        "help:help": "echo Prints a list of available scripts and a reminder about how to get more help.",
        "help": "echo Available scripts -- execute \\`npm run help:SCRIPTNAME\\` for help on SCRIPTNAME: && (npm run | grep '^\\s\\s\\S' | grep -v 'help\\|only\\|postinstall\\|prepare')",
        "help:dev": "run-s -s help:dev-*",
        "help:dev-1": "echo Compiles frontscope and starts a server running it.",
        "help:dev-2": "echo Note the server will hot-reload the code from any",
        "help:dev-3": "echo source files as they change, to ease development.",
        "dev": "make -f etc/Makefile vueserve",
        "help:dev:workbench": "run-s -s help:dev:workbench-*",
        "help:dev:workbench-1": "echo Compiles frontscope and starts a server running it in workbench mode,",
        "help:dev:workbench-2": "echo \"with the visualizers in the 'visualizers-workbench' directory loaded.\"",
        "help:dev:workbench-3": "echo \"Hot-reloads code changes, just like the 'dev' script.\"",
        "dev:workbench": "npm run dev mode=workbench",
        "help:doc:serve": "run-s -s help:doc:serve-*",
        "help:doc:serve-1": "echo \"This is like the 'dev' script, but for the\"",
        "help:doc:serve-2": "echo embedded documentation rather than the",
        "help:doc:serve-3": "echo Numberscope interface itself.",
        "doc:serve": "make -f etc/Makefile docserve",
        "help:doc:serve:workbench": "run-s -s help:doc:serve:workbench-*",
        "help:doc:serve:workbench-1": "echo \"This is like the 'dev:workbench' script, but\"",
        "help:doc:serve:workbench-2": "echo for the embedded documentation rather than the",
        "help:doc:serve:workbench-3": "echo Numberscope interface itself.",
        "doc:serve:workbench": "npm run doc:serve config=etc/mkdocs-workbench.yml",
        "help:build": "run-s -s help:build:*",
        "help:build:1": "echo Compiles frontscope and minifies the result,",
        "help:build:2": "echo producing a bundle ready for installation",
        "help:build:3": "echo on a server.",
        "build": "make -f etc/Makefile",
        "help:preview": "run-s -s help:preview:*",
        "help:preview:1": "echo Runs build and then serves the resulting site",
        "help:preview:2": "echo \"(the contents of the 'dist/' directory) \"",
        "help:preview:3": "echo for you to browse. This script differs from",
        "help:preview:4": "echo \"'dev' in that there isn't any hot module\"",
        "help:preview:5": "echo reload. It is what runs in production.",
        "preview": "make -f etc/Makefile preview",
        "help:preview:cmd": "echo Previews w/o rebuild; needed for e2e tests.",
        "preview:cmd": "vite --config etc/vite.config.ts preview",
        "help:test:unit": "echo Typechecks and runs unit tests.",
        "test:unit": "sh -c 'make -f etc/Makefile testunit \"cl_args=$@\"' phony",
        "help:test:e2e": "echo Runs end-to-end in-browser tests via Docker.",
        "test:e2e": "sh -c 'make -f etc/Makefile e2e/certificate \"cl_args=$@\"' phony",
        "help:test:e2e:cmd": "run-s -s help:test:e2e:cmd-*",
        "help:test:e2e:cmd-1": "echo Runs end-to-end tests directly.",
        "help:test:e2e:cmd-2": "echo However, note that it does not rebuild",
        "help:test:e2e:cmd-3": "echo before it runs, and some tests are not",
        "help:test:e2e:cmd-4": "echo reproducible outside of Docker, so be",
        "help:test:e2e:cmd-5": "echo careful -- this script exists mostly for",
        "help:test:e2e:cmd-6": "echo use by other scripts.",
        "test:e2e:cmd": "playwright test -c e2e/playwright.config.ts",
        "help:test:e2e:report": "echo Runs e2e and opens report in browser",
        "test:e2e:report": "sh -c 'make -f etc/Makefile playreport \"cl_args=$@\"' phony",
        "help:test:e2e:ui": "echo Runs interactive end-to-end tests directly.",
        "test:e2e:ui": "npm run build && npm run test:e2e:cmd -- --ui",
        "help:typecheck": "run-s -s help:typecheck:*",
        "help:typecheck:1": "echo Checks for TypeScript errors in both .vue",
        "help:typecheck:2": "echo and .ts files.",
        "typecheck": "make -f etc/Makefile typecheck",
        "help:lint": "run-s -s help:lintx:*",
        "help:lintx:01": "echo If you would like to format your code before",
        "help:lintx:02": "echo you make a commit with git -- which has hooks",
        "help:lintx:03": "echo to check the formatting -- call this script at",
        "help:lintx:04": "echo \"any time. It runs 'prettier' and 'eslint --fix'\"",
        "help:lintx:05": "echo on the project files. Note that this operation",
        "help:lintx:06": "echo does not simply _check_ the formatting of your",
        "help:lintx:07": "echo files, it _formats_ them! At least, if possible;",
        "help:lintx:08": "echo there are some formatting/code errors that it",
        "help:lintx:09": "echo does not know how to fix. These will simply be",
        "help:lintx:10": "echo reported as errors.",
        "help:lintx:11": "echo If any such issues are present at the time of a",
        "help:lintx:12": "echo commit, presuming the standard git hooks that",
        "help:lintx:13": "echo this project sets up are in place, the commit",
        "help:lintx:14": "echo will be rejected.",
        "lint": "make -f etc/Makefile prettiest 'flags=-l --write'",
        "help:lint:check": "run-s -s help:lint:check-*",
        "help:lint:check-1": "echo \"This is like the 'lint' script, but it\"",
        "help:lint:check-2": "echo only shows what changes would be made and",
        "help:lint:check-3": "echo reports any unresolved problems; it does",
        "help:lint:check-4": "echo not modify any of your source files.",
        "lint:check": "make -f etc/Makefile prettiest flags=-s",
        "//only lifecycle scripts below here": "echo",
        "prepare": "husky",
        "postinstall": "python3 -m venv .venv && cd tools && node pyrun.mjs python -m pip install -U pip && node pyrun.mjs pip install -r requirements.txt"
    },
    "dependencies": {
        "axios": "^1.6.8",
        "bigint-isqrt": "^0.3.2",
        "bigint-mod-arith": "^3.3.1",
        "interactjs": "^1.10.27",
        "p5": "^1.11.0",
        "p5.brush": "^1.1.2",
        "vue": "^3.4.31",
        "vue-router": "^4.4.0"
    },
    "devDependencies": {
        "@eslint/js": "^9.10.0",
        "@playwright/browser-chromium": "^1.46.1",
        "@playwright/browser-firefox": "^1.46.1",
        "@playwright/test": "^1.46.1",
        "@tsconfig/node20": "^20.1.4",
        "@types/jsdom": "^21.1.7",
        "@types/node": "^20.14.10",
        "@types/p5": "^1.7.6",
        "@vitejs/plugin-vue": "^5.0.5",
        "@vue/test-utils": "^2.4.6",
        "@vue/tsconfig": "^0.5.1",
        "diff": "^7.0.0",
        "eslint": "^9.10.0",
        "eslint-plugin-vue": "^9.28.0",
        "happy-dom": "^14.12.3",
        "husky": "^9.0.11",
        "jsdom": "^24.1.0",
        "mathjs": "^12.4.1",
        "npm-run-all": "^4.1.5",
        "prettier": "^3.3.3",
        "sass": "^1.77.2",
        "typescript": "^5.5.4",
        "typescript-eslint": "^8.5.0",
        "vite": "^5.3.3",
        "vitest": "^1.6.0",
        "vue-eslint-parser": "^9.4.3",
        "vue-tsc": "^2.1.2"
    }
}
