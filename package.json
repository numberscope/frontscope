{
    "name": "frontscope",
    "version": "0.3.0",
    "scripts": {
        "help:help": "echo Prints a list of available scripts and a reminder about how to get more help.",
        "help": "echo Available scripts -- execute \\`npm run help:SCRIPTNAME\\` for help on SCRIPTNAME: && (npm run | grep '^\\s\\s\\S' | grep -v 'help\\|only\\|postinstall\\|prepare')",
        "help:dev": "run-s -s help:dev-*",
        "help:dev-1": "echo Compiles frontscope and starts a server running it.",
        "help:dev-2": "echo Note the server will hot-reload the code from any",
        "help:dev-3": "echo source files as they change, to ease development.",
        "help:dev:workbench": "run-s -s help:dev:workbench-*",
        "help:dev:workbench-1": "echo Compiles frontscope and starts a server running it in workbench mode,",
        "help:dev:workbench-2": "echo \"with the visualizers in the 'visualizers-workbench' directory loaded.\"",
        "help:dev:workbench-3": "echo \"Hot-reloads code changes, just like the 'dev' script.\"",
        "dev": "npm run typecheck && vite",
        "dev:workbench": "npm run typecheck && vite --mode workbench",
        "help:doc:serve": "run-s -s help:doc:serve-*",
        "help:doc:serve-1": "echo \"This is like the 'dev' script, but for the\"",
        "help:doc:serve-2": "echo embedded documentation rather than the",
        "help:doc:serve-3": "echo Numberscope interface itself.",
        "help:doc:serve:workbench": "run-s -s help:doc:serve:workbench-*",
        "help:doc:serve:workbench-1": "echo \"This is like the 'dev:workbench' script, but\"",
        "help:doc:serve:workbench-2": "echo for the embedded documentation rather than the",
        "help:doc:serve:workbench-3": "echo Numberscope interface itself.",
        "doc:serve": "cd tools && node pyrun.mjs mkdocs serve",
        "doc:serve:workbench": "cd tools && node pyrun.mjs mkdocs serve --config-file=mkdocs-workbench.yml",
        "help:build": "run-s -s help:build:*",
        "help:build:1": "echo Compiles frontscope and minifies the result,",
        "help:build:2": "echo producing a bundle ready for installation",
        "help:build:3": "echo on a server.",
        "build": "npm run typecheck && vite build && cd tools && node pyrun.mjs mkdocs build",
        "help:preview": "run-s -s help:preview:*",
        "help:preview:1": "echo Serves the most recently built files -- the",
        "help:preview:2": "echo \"contents of the 'dist/' directory -- for you\"",
        "help:preview:3": "echo \"to preview. This script differs from 'dev' in\"",
        "help:preview:4": "echo \"that there isn't any hot module reload. It is\"",
        "help:preview:5": "echo closer to what you will run in production.",
        "preview": "vite preview",
        "help:test:unit": "echo Runs unit tests.",
        "test:unit": "vitest run",
        "help:typecheck": "run-s -s help:typecheck:*",
        "help:typecheck:1": "echo Checks for TypeScript errors in both .vue",
        "help:typecheck:2": "echo and .ts files.",
        "typecheck": "vue-tsc --noEmit -p tsconfig.vitest.json --composite false",
        "help:lint": "run-s -s help:lintx:*",
        "help:lintx:01": "echo If you would like to format your code before you",
        "help:lintx:02": "echo make a commit with git -- which has hooks to do",
        "help:lintx:03": "echo automatic formatting -- you can call this script",
        "help:lintx:04": "echo \"at any time. It runs 'prettier' and\"",
        "help:lintx:05": "echo \"'eslint --fix' on the project files. Note that\"",
        "help:lintx:06": "echo this operation does not simply _check_ the",
        "help:lintx:07": "echo formatting of your files, it _formats_ them!",
        "help:lintx:08": "echo At least, if possible -- there are some",
        "help:lintx:09": "echo formatting/code errors that it does not know how",
        "help:lintx:10": "echo to fix. These will simply be reported as errors.",
        "help:lintx:11": "echo If any such issues are present at the time of a",
        "help:lintx:12": "echo of a commit, presuming the standard git hooks",
        "help:lintx:13": "echo this project sets up are in place, the commit",
        "help:lintx:14": "echo will be rejected.",
        "lint": "prettier-eslint --write \"**/*.*\" && npm run lint:check",
        "help:lint:check": "run-s -s help:lint:check:*",
        "help:lint:check:01": "echo \"This is like the 'lint' script but only\"",
        "help:lint:check:02": "echo \"reports problems; does not modify any of\"",
        "help:lint:check:03": "echo your source files. Note that this script",
        "help:lint:check:04": "echo might not report any errors but then a run",
        "help:lint:check:05": "echo \"of the 'lint' script might modify files.\"",
        "help:lint:check:06": "echo \"That can happen because 'prettier' does not\"",
        "help:lint:check:07": "echo \"have a 'diagnostic' mode in which it\"",
        "help:lint:check:08": "echo reports discrepancies with its preferred",
        "help:lint:check:09": "echo formatting, while some formatting not",
        "help:lint:check:10": "echo \"preferred by 'prettier' is nevertheless\"",
        "help:lint:check:11": "echo \"acceptable to 'eslint'.\"",
        "lint:check": "eslint . --ext .vue,.js,.jsx,.cjs,.mjs,.ts,.tsx,.cts,.mts --ignore-path .gitignore",
        "help:lint:list": "run-s -s help:lint:list:*",
        "help:lint:list:1": "echo \"This is like the 'lint' script but only\"",
        "help:lint:list:2": "echo _lists_ the files that would be changed.",
        "help:lint:list:3": "echo It does not modify any source files or report",
        "help:lint:list:4": "echo what the problems were or report any problems",
        "help:lint:list:5": "echo that the tools do not know how to fix.",
        "lint:list": "prettier-eslint --list-different \"**/*.*\"",
        "help:lint:staged": "echo Only for internal use in the pre-commit hook.",
        "lint:staged": "lint-staged",
        "//only lifecycle scripts below here": "echo",
        "prepare": "husky",
        "postinstall": "python3 -m venv .venv && cd tools && node pyrun.mjs python -m pip install -U pip && node pyrun.mjs pip install -r requirements.txt"
    },
    "dependencies": {
        "bigint-isqrt": "^0.3.2",
        "bigint-mod-arith": "^3.3.1",
        "interactjs": "^1.10.27",
        "p5": "^1.9.2",
        "vue": "^3.4.24",
        "vue-router": "^4.3.2"
    },
    "devDependencies": {
        "@rushstack/eslint-patch": "^1.10.2",
        "@tsconfig/node20": "^20.1.4",
        "@types/jsdom": "^21.1.6",
        "@types/node": "^20.12.7",
        "@types/p5": "^1.7.6",
        "@vitejs/plugin-vue": "^5.0.4",
        "@vue/eslint-config-prettier": "^9.0.0",
        "@vue/eslint-config-typescript": "^13.0.0",
        "@vue/test-utils": "^2.4.5",
        "@vue/tsconfig": "^0.5.1",
        "axios": "^1.6.8",
        "eslint": "^8.57.0",
        "eslint-plugin-vue": "^9.25.0",
        "happy-dom": "^14.7.1",
        "husky": "^9.0.11",
        "jsdom": "^24.0.0",
        "lint-staged": "^15.2.2",
        "mathjs": "^12.4.1",
        "npm-run-all": "^4.1.5",
        "prettier": "^3.2.5",
        "prettier-eslint": "^16.3.0",
        "prettier-eslint-cli": "^8.0.1",
        "sass": "^1.77.2",
        "typescript": "^5.4.5",
        "vite": "^5.2.10",
        "vitest": "^1.5.0",
        "vue-tsc": "^2.0.14",
        "vue-unique-id": "^3.2.1"
    },
    "lint-staged": {
        "*": "prettier-eslint --write"
    }
}
