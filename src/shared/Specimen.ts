import type {VisualizerInterface} from '../visualizers/VisualizerInterface'
import type {SequenceInterface} from '../sequences/SequenceInterface'
import type {GenericParamDescription} from './Paramable'

/**
 * This class represents a specimen, containing a visualizer,
 * a sequence, and the set of all parameters that make both of them up.
 * Specimens can be converted to and from URLs so that they can be saved.
 */
export class Specimen {
    private _visualizer: VisualizerInterface<GenericParamDescription>
    private _sequence: SequenceInterface<GenericParamDescription>
    private location?: HTMLElement
    private isSetup: boolean = false

    /**
     * Constructs a new specimen from a visualizer, and a sequence
     * It is not important that the visualizer
     * is constructed with the same sequence as the one passed to this
     * constructor, because the visualizer will be automatically set
     * to view the specimen's visualizer in this constructor.
     * @param visualizer the specimen's visualizer
     * @param sequence the specimen's sequence
     */
    constructor(
        visualizer: VisualizerInterface<GenericParamDescription>,
        sequence: SequenceInterface<GenericParamDescription>
    ) {
        this._visualizer = visualizer
        this._sequence = sequence
    }
    /**
     * Call this as soon after construction as possible once the HTML
     * element has been mounted
     */
    setup(location: HTMLElement) {
        this.location = location
        this._visualizer.view(this._sequence)
        this._visualizer.inhabit(this.location)
        this._visualizer.show()
        this.isSetup = true
    }
    /**
     * Returns the specimen's visualizer
     */
    get visualizer(): VisualizerInterface<GenericParamDescription> {
        return this._visualizer
    }
    /**
     * Returns the specimen's sequence
     */
    get sequence(): SequenceInterface<GenericParamDescription> {
        return this._sequence
    }
    /**
     * Assigns a new visualizer to this specimen and updates its sequence
     * to match the specimen. It also ensures this visualizer inhabits
     * the correct HTML element and begins to render.
     */
    set visualizer(visualizer: VisualizerInterface<GenericParamDescription>) {
        this._visualizer = visualizer
        if (this.isSetup) this.setup(this.location!)
    }
    /**
     * Assigns a new sequence to this specimen and updates the visualizer
     * to reflect this change in the render.
     */
    set sequence(sequence: SequenceInterface<GenericParamDescription>) {
        this._sequence = sequence
        this.visualizer.view(this.sequence)
    }
    /**
     * Ensures that the visualizer is aware that the sequence has been
     * updated.
     */
    updateSequence() {
        this.visualizer.view(this.sequence)
    }
    /**
     * Converts the specimen to a URL as a way of saving all information
     * about the specimen.
     * @return the specimen URL as a string
     */
    toURL(): string {
        // TODO
        return ''
    }
    /**
     * Reads a specimen URL previously generated by toURL() and parses
     * it back into a `Specimen` object.
     * @param _url the specimen URL to parse
     * @return the corresponding specimen object
     */
    static fromURL(_url: string): Specimen {
        // TODO
        return new Specimen(
            null as unknown as VisualizerInterface<GenericParamDescription>,
            null as unknown as SequenceInterface<GenericParamDescription>
        )
    }
}
